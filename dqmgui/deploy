# vim: set ft=sh sw=2 ts=8 et :
deploy_dqmgui_variants="default bare online"
deploy_dqmgui_deps() {
  deploy $stage backend
  [ $variant == online ] && deploy $stage admin default || deploy $stage admin $variant
  case $variant in
  bare | online) ;;
  *)
    deploy $stage wmcore-auth
    ;;
  esac
}

deploy_dqmgui_prep() {
  extra=
  for d in online offline relval dev; do
    extra="$extra $d $d/sessions $d/agents $d/data $d/uploads $d/zipped $project_logs/$d"
    for a in clean freezer ixmerge ixstageout qcontrol vcontrol register register128 stageout verify zip; do
      extra="$extra $d/agents/$a"
    done
  done
  mkproj $extra backup
  [ ! $variant == online ] && mkproxy
  $nogroups || chmod g+ws */data */zipped */agents/*
}

deploy_dqmgui_sw() {
  deploy_pkg -a dqmgui/GoogleAPI.py comp cms+dqmgui
}

deploy_dqmgui_post() {
  case $host in
  vocms074[0123456] | vocms0307 | vocms0318 | vocms076[123456] | vocms084[1234])
    disable
    ;;
  *)
    enable
    ;;
  esac

  case $variant in bare) return ;; esac

  (
    mkcrontab
    sysboot
    [ ! -f $root/enabled/$project ] || {
      cmd="$project_config/daily"
      $nogroups || cmd="sudo -H -u _dqmgui bashs -l -c '$cmd'"
      echo "17 2 * * * $cmd"
      # Adding kinit script for EOS
      echo "*/6 * * * * /data/srv/current/config/admin/kinit.sh"
      echo "@reboot /data/srv/current/config/admin/kinit.sh"
    }
  ) | crontab -

  # Castor stageout acronjobs enabled only for the
  # official offline, relval and dev instances.
  # If a job fails (i.e. exit code not 0 or 3, for some reason, or
  # not 4, which is the case that another job of the same name is already
  # running), send an e-mail to cmsweb-operator.
  ###################################### START TODO FOR CC7
  # Now the acron jobs are only created for the SLC servers
  # We will have to add vocms073[89] here
  ###################################### END TODO FOR CC7
  case $host:$root in
  # Dev machine
  vocms0731:/data/srv)
    klist -s # must have afs kerberos token
    (
      acrontab -l | { grep -E -v -e " $host.*$project_config/" || true; }
      # backup of the index
      echo "0 7 * * * $host $project_config/manage indexbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"dev DQM GUI Index Backup, exit code: \$ret\" -a $project_logs/dev/agent-castorindexbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"dev DQM GUI Zip Backup, exit code: \$ret\" -a $project_logs/dev/agent-castorzipbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # check/verification of the backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackupcheck 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"dev DQM GUI Zip Backup Check, exit code: \$ret\" -a $project_logs/dev/agent-castorzipbackupcheck-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # Monitor index size
      echo "0 6 * * * $host $project_config/manage indexmonitor 'I did read documentation'"
    ) | acrontab
    ;;
  # Offline GUI
  vocms0738:/data/srv)
    klist -s # must have afs kerberos token
    (
      acrontab -l | { grep -E -v -e " $host.*$project_config/" || true; }
      # backup of the index
      echo "0 7 * * * $host $project_config/manage indexbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"Offline DQM GUI Index Backup, exit code: \$ret\" -a $project_logs/offline/agent-castorindexbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup| mailx -s \"Offline DQM GUI Zip Backup, exit code: \$ret\" -a $project_logs/offline/agent-castorzipbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # check/verification of the backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackupcheck 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"Offline DQM GUI Zip Backup Check, exit code: \$ret\" -a $project_logs/offline/agent-castorzipbackupcheck-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # Monitor index size
      echo "0 6 * * * $host $project_config/manage indexmonitor 'I did read documentation'"
    ) | acrontab
    ;;
  # RelVal GUI
  vocms0739:/data/srv)
    klist -s # must have afs kerberos token
    (
      acrontab -l | { grep -E -v -e " $host.*$project_config/" || true; }
      # backup of the index
      echo "0 7 * * * $host $project_config/manage indexbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"RelVal DQM GUI Index Backup, exit code: \$ret\" -a $project_logs/relval/agent-castorindexbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackup 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup| mailx -s \"RelVal DQM GUI Zip Backup, exit code: \$ret\" -a $project_logs/relval/agent-castorzipbackup-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # check/verification of the backup of the zipped root files
      echo "*/15 * * * * $host $project_config/manage zipbackupcheck 'I did read documentation'; ret=\$?; if [ \$ret -ne 3 ] && [ \$ret -ne 0 ] && [ \$ret -ne 4 ]; then echo Error during backup | mailx -s \"RelVal DQM GUI Zip Backup Check, exit code: \$ret\" -a $project_logs/relval/agent-castorzipbackupcheck-\$(printf '%(%Y%m%d)T' -1)-$host.log cmsweb-operator@cern.ch; fi"
      # Monitor index size
      echo "0 6 * * * $host $project_config/manage indexmonitor 'I did read documentation'"
    ) | acrontab
    ;;
  # Any other machine: do nothing
  *) ;;
  esac

  # Trigger plugins and layouts rebuild if server is enabled.
  [ ! -f $root/enabled/$project ] || {
    cmd="$project_config/manage compile 'I did read documentation'"
    $nogroups || cmd="sudo -H -u _dqmgui bashs -l -c '$cmd'"
    eval "$cmd"
  }

  # Clear black list
  find $project_state -maxdepth 2 -name blacklist.txt -exec rm {} \;
}

deploy_dqmgui_auth() {
  case $1 in
  */GoogleAPI.py)
    cat <<-\EOF
api_key=None
EOF
    ;;
  esac
}
